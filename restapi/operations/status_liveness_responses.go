// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bureau14/qdb-api-rest/models"
)

// StatusLivenessOKCode is the HTTP code returned for type StatusLivenessOK
const StatusLivenessOKCode int = 200

/*StatusLivenessOK Successful operation

swagger:response statusLivenessOK
*/
type StatusLivenessOK struct {
}

// NewStatusLivenessOK creates StatusLivenessOK with default headers values
func NewStatusLivenessOK() *StatusLivenessOK {

	return &StatusLivenessOK{}
}

// WriteResponse to the client
func (o *StatusLivenessOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StatusLivenessInternalServerErrorCode is the HTTP code returned for type StatusLivenessInternalServerError
const StatusLivenessInternalServerErrorCode int = 500

/*StatusLivenessInternalServerError Bad Request.

swagger:response statusLivenessInternalServerError
*/
type StatusLivenessInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.QdbError `json:"body,omitempty"`
}

// NewStatusLivenessInternalServerError creates StatusLivenessInternalServerError with default headers values
func NewStatusLivenessInternalServerError() *StatusLivenessInternalServerError {

	return &StatusLivenessInternalServerError{}
}

// WithPayload adds the payload to the status liveness internal server error response
func (o *StatusLivenessInternalServerError) WithPayload(payload *models.QdbError) *StatusLivenessInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the status liveness internal server error response
func (o *StatusLivenessInternalServerError) SetPayload(payload *models.QdbError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StatusLivenessInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
