// Code generated by go-swagger; DO NOT EDIT.

package option

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bureau14/qdb-api-rest/models"
)

// SetParallelismOKCode is the HTTP code returned for type SetParallelismOK
const SetParallelismOKCode int = 200

/*SetParallelismOK Successful operation

swagger:response setParallelismOK
*/
type SetParallelismOK struct {
}

// NewSetParallelismOK creates SetParallelismOK with default headers values
func NewSetParallelismOK() *SetParallelismOK {

	return &SetParallelismOK{}
}

// WriteResponse to the client
func (o *SetParallelismOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SetParallelismBadRequestCode is the HTTP code returned for type SetParallelismBadRequest
const SetParallelismBadRequestCode int = 400

/*SetParallelismBadRequest Bad Request.

swagger:response setParallelismBadRequest
*/
type SetParallelismBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.QdbError `json:"body,omitempty"`
}

// NewSetParallelismBadRequest creates SetParallelismBadRequest with default headers values
func NewSetParallelismBadRequest() *SetParallelismBadRequest {

	return &SetParallelismBadRequest{}
}

// WithPayload adds the payload to the set parallelism bad request response
func (o *SetParallelismBadRequest) WithPayload(payload *models.QdbError) *SetParallelismBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the set parallelism bad request response
func (o *SetParallelismBadRequest) SetPayload(payload *models.QdbError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SetParallelismBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
