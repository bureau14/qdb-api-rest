// Code generated by go-swagger; DO NOT EDIT.

package option

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bureau14/qdb-api-rest/models"
)

// GetParallelismOKCode is the HTTP code returned for type GetParallelismOK
const GetParallelismOKCode int = 200

/*GetParallelismOK Successful operation

swagger:response getParallelismOK
*/
type GetParallelismOK struct {

	/*
	  In: Body
	*/
	Payload int64 `json:"body,omitempty"`
}

// NewGetParallelismOK creates GetParallelismOK with default headers values
func NewGetParallelismOK() *GetParallelismOK {

	return &GetParallelismOK{}
}

// WithPayload adds the payload to the get parallelism o k response
func (o *GetParallelismOK) WithPayload(payload int64) *GetParallelismOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get parallelism o k response
func (o *GetParallelismOK) SetPayload(payload int64) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetParallelismOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetParallelismBadRequestCode is the HTTP code returned for type GetParallelismBadRequest
const GetParallelismBadRequestCode int = 400

/*GetParallelismBadRequest Bad Request.

swagger:response getParallelismBadRequest
*/
type GetParallelismBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.QdbError `json:"body,omitempty"`
}

// NewGetParallelismBadRequest creates GetParallelismBadRequest with default headers values
func NewGetParallelismBadRequest() *GetParallelismBadRequest {

	return &GetParallelismBadRequest{}
}

// WithPayload adds the payload to the get parallelism bad request response
func (o *GetParallelismBadRequest) WithPayload(payload *models.QdbError) *GetParallelismBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get parallelism bad request response
func (o *GetParallelismBadRequest) SetPayload(payload *models.QdbError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetParallelismBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
