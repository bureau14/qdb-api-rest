// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Node node
// swagger:model Node
type Node struct {

	// cpu total
	// Required: true
	// Minimum: 0
	CPUTotal *int64 `json:"cpuTotal"`

	// cpu used
	// Required: true
	// Minimum: 0
	CPUUsed *int64 `json:"cpuUsed"`

	// disk total
	// Required: true
	// Minimum: 0
	DiskTotal *int64 `json:"diskTotal"`

	// disk used
	// Required: true
	// Minimum: 0
	DiskUsed *int64 `json:"diskUsed"`

	// id
	// Required: true
	ID *string `json:"id"`

	// memory total
	// Required: true
	// Minimum: 0
	MemoryTotal *int64 `json:"memoryTotal"`

	// memory used
	// Required: true
	// Minimum: 0
	MemoryUsed *int64 `json:"memoryUsed"`

	// os
	// Required: true
	Os *string `json:"os"`

	// quasardb version
	// Required: true
	QuasardbVersion *string `json:"quasardbVersion"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuasardbVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateCPUTotal(formats strfmt.Registry) error {

	if err := validate.Required("cpuTotal", "body", m.CPUTotal); err != nil {
		return err
	}

	if err := validate.MinimumInt("cpuTotal", "body", int64(*m.CPUTotal), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateCPUUsed(formats strfmt.Registry) error {

	if err := validate.Required("cpuUsed", "body", m.CPUUsed); err != nil {
		return err
	}

	if err := validate.MinimumInt("cpuUsed", "body", int64(*m.CPUUsed), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateDiskTotal(formats strfmt.Registry) error {

	if err := validate.Required("diskTotal", "body", m.DiskTotal); err != nil {
		return err
	}

	if err := validate.MinimumInt("diskTotal", "body", int64(*m.DiskTotal), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateDiskUsed(formats strfmt.Registry) error {

	if err := validate.Required("diskUsed", "body", m.DiskUsed); err != nil {
		return err
	}

	if err := validate.MinimumInt("diskUsed", "body", int64(*m.DiskUsed), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateMemoryTotal(formats strfmt.Registry) error {

	if err := validate.Required("memoryTotal", "body", m.MemoryTotal); err != nil {
		return err
	}

	if err := validate.MinimumInt("memoryTotal", "body", int64(*m.MemoryTotal), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateMemoryUsed(formats strfmt.Registry) error {

	if err := validate.Required("memoryUsed", "body", m.MemoryUsed); err != nil {
		return err
	}

	if err := validate.MinimumInt("memoryUsed", "body", int64(*m.MemoryUsed), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateQuasardbVersion(formats strfmt.Registry) error {

	if err := validate.Required("quasardbVersion", "body", m.QuasardbVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
